from typing import Optional

from deepdive.schema import VizSpec, VizSpecParams, VizSpecError, YAxis


def parse_spec(spec_str: Optional[str]) -> VizSpec:
    """
    Parses a spec from a JSON string, attempting to correct the spec if invalid
    """
    if not spec_str:
        return None

    try:
        return VizSpec.model_validate_json(spec_str)
    except VizSpecError as e:
        return _correct_spec(VizSpecParams.model_validate_json(spec_str), e)


def _correct_spec(bad_spec: VizSpecParams, spec_error: VizSpecError) -> VizSpec:
    """
    Attempts to correct a spec given a bad spec (which we know to contain a VizSpecError)
    and the VizSpecError generated by parsing the bad_spec

    This logic is for catching user interactions that inadvertently lead to breaking our rules around VizSpecs
    And for us to have a consolidated place in the backend to do all "corrections"

    Examples:
     - User deletes a Y Axis that is used by sort by
       - We delete the sort by term
     - User adds a column when a select * is already applied
       - We get rid of select * and replace it with the new column
     - User adds an x-axis/breakdown with un-aggregated y-axes
       - We replace y-axises with COUNT(*)

    Some of this can (and should be) achieved through the UI, e.g, don't let users take interactions which aren't productive
    But others, such as the examples described above, are easier to implement in the backend and also intuitive to do so

    e.g, lets us enforce our VizSpec rules and also correct them in the same place
    """
    if spec_error.error_type == "aggregation_not_specified":
        bad_spec.y_axises = [YAxis(name="*", aggregation="COUNT")]
        bad_spec.sort_by = None
        return VizSpec.model_validate(bad_spec.model_dump())
    elif spec_error.error_type == "sort_by_not_found":
        bad_spec.sort_by = None
        return VizSpec.model_validate(bad_spec.model_dump())
    elif spec_error.error_type == "extra_column_with_star":
        bad_spec.y_axises = [
            y_axis for y_axis in bad_spec.y_axises if y_axis.name != "*"
        ]
        return VizSpec.model_validate(bad_spec.model_dump())

    raise spec_error
